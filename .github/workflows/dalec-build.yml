name: DALEC Package Build

on:
  repository_dispatch:
    types: [binary_ready]
  push:
    tags:
      - '*.*.*'
      - 'v*.*.*'
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io

jobs:
  build-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      
    strategy:
      matrix:
        target: [jammy, bookworm]
        platform:
          - linux/amd64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download surveilr binary
        run: |
          # Try to derive version if it's a tag, else use 'latest'
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            echo "🔍 Fetching latest release info..."
            API_RESPONSE=$(curl -s https://api.github.com/repos/surveilr/packages/releases/latest)
            VERSION=$(echo "$API_RESPONSE" | jq -r '.tag_name // empty')
            
            if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
              echo "❌ Could not determine latest version from API"
              echo "API Response: $API_RESPONSE"
              exit 1
            fi
          fi

          echo "📦 Downloading surveilr binary for version: $VERSION"
          
          # Download from release
          wget -q "https://github.com/surveilr/packages/releases/download/${VERSION}/surveilr_${VERSION}_x86_64-unknown-linux-gnu.tar.gz" -O surveilr.tar.gz || {
            echo "❌ Failed to fetch surveilr binary for version ${VERSION}"
            echo "Tried URL: https://github.com/surveilr/packages/releases/download/${VERSION}/surveilr_${VERSION}_x86_64-unknown-linux-gnu.tar.gz"
            exit 1
          }
          
          # Clean up any existing files or directories
          rm -rf surveilr
          
          # Extract binary
          tar -xzf surveilr.tar.gz || {
            echo "❌ Failed to extract surveilr binary"
            exit 1
          }
          
          # Place binary where DALEC expects it
          mkdir -p src
          cp surveilr src/surveilr
          chmod +x src/surveilr

          echo "✅ surveilr binary downloaded and prepared."

        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            network=host
            
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/surveilr-${{ matrix.target }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push package
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dalec-surveilr-deb.yaml
          platforms: ${{ matrix.platform }}
          target: ${{ matrix.target }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true
          
      - name: Generate SBOM
        if: matrix.platform == 'linux/amd64'
        run: |
          # Extract SBOM from built image using the main tag
          docker buildx imagetools inspect \
            ${{ env.REGISTRY }}/${{ github.repository }}/surveilr-${{ matrix.target }}:main \
            --format '{{ json .SBOM }}' > surveilr-${{ matrix.target }}-sbom.json
            
      - name: Upload SBOM
        if: matrix.platform == 'linux/amd64'
        uses: actions/upload-artifact@v4
        with:
          name: surveilr-${{ matrix.target }}-sbom
          path: surveilr-${{ matrix.target }}-sbom.json
          
  extract-packages:
    needs: build-packages
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    strategy:
      matrix:
        include:
          - target: jammy
            format: deb
            platform: linux/amd64
          - target: bookworm  
            format: deb
            platform: linux/amd64
    
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract package artifacts  
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository }}/surveilr-${{ matrix.target }}:${{ github.ref_name }}"
          
          echo "🔍 Extracting packages from $IMAGE_NAME..."
          
          # Create container with different dummy commands until one works
          CONTAINER_ID=""
          for cmd in "/bin/true" "true" "echo hello" "ls" "/usr/bin/true"; do
            if CONTAINER_ID=$(docker create $IMAGE_NAME $cmd 2>/dev/null); then
              echo "✅ Created container with command: $cmd"
              break
            fi
          done
          
          if [ -z "$CONTAINER_ID" ]; then
            echo "❌ Failed to create container with any command"
            exit 1
          fi
          
          echo "Container ID: $CONTAINER_ID"
          
          # Extract specific files based on format to avoid permission issues
          case "${{ matrix.format }}" in
            deb)
              docker cp $CONTAINER_ID:/. ./temp_extract/
              find ./temp_extract -name "*.deb" -exec cp {} ./ \; 2>/dev/null || echo "No .deb files found"
              ls -la *.deb 2>/dev/null || echo "No .deb files in current directory"
              ;;
            rpm)
              docker cp $CONTAINER_ID:/. ./temp_extract/
              find ./temp_extract -name "*.rpm" -exec cp {} ./ \; 2>/dev/null || echo "No .rpm files found"  
              ls -la *.rpm 2>/dev/null || echo "No .rpm files in current directory"
              ;;
          esac
          
          # Cleanup
          docker rm $CONTAINER_ID
          rm -rf ./temp_extract
          
      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: surveilr-${{ matrix.target }}-${{ matrix.format }}
          path: "*.{deb,rpm,tar.gz}"
          
  create-release:
    needs: [build-packages, extract-packages]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: List downloaded artifacts
        run: |
          echo "📦 Downloaded artifacts:"
          find ./artifacts -type f -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" -o -name "*sbom.json" | head -10
          ls -la ./artifacts/ || echo "No artifacts directory"
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.tar.gz
            artifacts/**/*sbom.json
          generate_release_notes: true
          prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}